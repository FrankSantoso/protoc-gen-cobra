// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TimerClient is the client API for Timer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimerClient interface {
	Tick(ctx context.Context, in *TickRequest, opts ...grpc.CallOption) (Timer_TickClient, error)
}

type timerClient struct {
	cc grpc.ClientConnInterface
}

func NewTimerClient(cc grpc.ClientConnInterface) TimerClient {
	return &timerClient{cc}
}

func (c *timerClient) Tick(ctx context.Context, in *TickRequest, opts ...grpc.CallOption) (Timer_TickClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Timer_serviceDesc.Streams[0], "/example.Timer/Tick", opts...)
	if err != nil {
		return nil, err
	}
	x := &timerTickClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Timer_TickClient interface {
	Recv() (*TickResponse, error)
	grpc.ClientStream
}

type timerTickClient struct {
	grpc.ClientStream
}

func (x *timerTickClient) Recv() (*TickResponse, error) {
	m := new(TickResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TimerServer is the server API for Timer service.
// All implementations must embed UnimplementedTimerServer
// for forward compatibility
type TimerServer interface {
	Tick(*TickRequest, Timer_TickServer) error
	mustEmbedUnimplementedTimerServer()
}

// UnimplementedTimerServer must be embedded to have forward compatible implementations.
type UnimplementedTimerServer struct {
}

func (*UnimplementedTimerServer) Tick(*TickRequest, Timer_TickServer) error {
	return status.Errorf(codes.Unimplemented, "method Tick not implemented")
}
func (*UnimplementedTimerServer) mustEmbedUnimplementedTimerServer() {}

func RegisterTimerServer(s *grpc.Server, srv TimerServer) {
	s.RegisterService(&_Timer_serviceDesc, srv)
}

func _Timer_Tick_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TickRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TimerServer).Tick(m, &timerTickServer{stream})
}

type Timer_TickServer interface {
	Send(*TickResponse) error
	grpc.ServerStream
}

type timerTickServer struct {
	grpc.ServerStream
}

func (x *timerTickServer) Send(m *TickResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Timer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.Timer",
	HandlerType: (*TimerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Tick",
			Handler:       _Timer_Tick_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "timer.proto",
}
