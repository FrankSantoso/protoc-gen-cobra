// Code generated by protoc-gen-cobra. DO NOT EDIT.

package pb

import (
	context "context"
	tls "crypto/tls"
	x509 "crypto/x509"
	fmt "fmt"
	iocodec "github.com/NathanBaulch/protoc-gen-cobra/iocodec"
	proto "github.com/golang/protobuf/proto"
	cobra "github.com/spf13/cobra"
	pflag "github.com/spf13/pflag"
	oauth2 "golang.org/x/oauth2"
	grpc "google.golang.org/grpc"
	credentials "google.golang.org/grpc/credentials"
	oauth "google.golang.org/grpc/credentials/oauth"
	ioutil "io/ioutil"
	net "net"
	os "os"
	filepath "path/filepath"
	strings "strings"
	time "time"
)

var NestedMessagesClientDefaultConfig = &_NestedMessagesClientConfig{
	ServerAddr:     "localhost:8080",
	ResponseFormat: "json",
	Timeout:        10 * time.Second,
	AuthTokenType:  "Bearer",
}

type _NestedMessagesClientConfig struct {
	ServerAddr         string
	RequestFile        string
	Stdin              bool
	ResponseFormat     string
	Timeout            time.Duration
	TLS                bool
	ServerName         string
	InsecureSkipVerify bool
	CACertFile         string
	CertFile           string
	KeyFile            string
	AuthToken          string
	AuthTokenType      string
	JWTKey             string
	JWTKeyFile         string
}

func (o *_NestedMessagesClientConfig) addFlags(fs *pflag.FlagSet) {
	fs.StringVarP(&o.ServerAddr, "server-addr", "s", o.ServerAddr, "server address in form of host:port")
	fs.StringVarP(&o.RequestFile, "request-file", "f", o.RequestFile, "client request file (must be json, yaml, or xml); use \"-\" for stdin + json")
	fs.BoolVar(&o.Stdin, "stdin", o.Stdin, "read client request from STDIN; alternative for '-f -'")
	fs.StringVarP(&o.ResponseFormat, "response-format", "o", o.ResponseFormat, "response format (json, prettyjson, xml, prettyxml, or yaml)")
	fs.DurationVar(&o.Timeout, "timeout", o.Timeout, "client connection timeout")
	fs.BoolVar(&o.TLS, "tls", o.TLS, "enable tls")
	fs.StringVar(&o.ServerName, "tls-server-name", o.ServerName, "tls server name override")
	fs.BoolVar(&o.InsecureSkipVerify, "tls-insecure-skip-verify", o.InsecureSkipVerify, "INSECURE: skip tls checks")
	fs.StringVar(&o.CACertFile, "tls-ca-cert-file", o.CACertFile, "ca certificate file")
	fs.StringVar(&o.CertFile, "tls-cert-file", o.CertFile, "client certificate file")
	fs.StringVar(&o.KeyFile, "tls-key-file", o.KeyFile, "client key file")
	fs.StringVar(&o.AuthToken, "auth-token", o.AuthToken, "authorization token")
	fs.StringVar(&o.AuthTokenType, "auth-token-type", o.AuthTokenType, "authorization token type")
	fs.StringVar(&o.JWTKey, "jwt-key", o.JWTKey, "jwt key")
	fs.StringVar(&o.JWTKeyFile, "jwt-key-file", o.JWTKeyFile, "jwt key file")
}

func NestedMessagesClientCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "nestedmessages",
		Short: "NestedMessages service client",
		Long:  "",
	}
	NestedMessagesClientDefaultConfig.addFlags(cmd.PersistentFlags())
	cmd.AddCommand(
		_NestedMessagesGetCommand(),
		_NestedMessagesGetDeeplyNestedCommand(),
	)
	return cmd
}

func _NestedMessagesDial(ctx context.Context) (*grpc.ClientConn, NestedMessagesClient, error) {
	cfg := NestedMessagesClientDefaultConfig
	opts := []grpc.DialOption{grpc.WithBlock()}
	if cfg.TLS {
		tlsConfig := &tls.Config{InsecureSkipVerify: cfg.InsecureSkipVerify}
		if cfg.CACertFile != "" {
			caCert, err := ioutil.ReadFile(cfg.CACertFile)
			if err != nil {
				return nil, nil, fmt.Errorf("ca cert: %v", err)
			}
			certPool := x509.NewCertPool()
			certPool.AppendCertsFromPEM(caCert)
			tlsConfig.RootCAs = certPool
		}
		if cfg.CertFile != "" {
			if cfg.KeyFile == "" {
				return nil, nil, fmt.Errorf("missing key file")
			}
			pair, err := tls.LoadX509KeyPair(cfg.CertFile, cfg.KeyFile)
			if err != nil {
				return nil, nil, fmt.Errorf("cert/key: %v", err)
			}
			tlsConfig.Certificates = []tls.Certificate{pair}
		}
		if cfg.ServerName != "" {
			tlsConfig.ServerName = cfg.ServerName
		} else {
			addr, _, _ := net.SplitHostPort(cfg.ServerAddr)
			tlsConfig.ServerName = addr
		}
		cred := credentials.NewTLS(tlsConfig)
		opts = append(opts, grpc.WithTransportCredentials(cred))
	} else {
		opts = append(opts, grpc.WithInsecure())
	}
	if cfg.AuthToken != "" {
		cred := oauth.NewOauthAccess(&oauth2.Token{
			AccessToken: cfg.AuthToken,
			TokenType:   cfg.AuthTokenType,
		})
		opts = append(opts, grpc.WithPerRPCCredentials(cred))
	}
	if cfg.JWTKey != "" {
		cred, err := oauth.NewJWTAccessFromKey([]byte(cfg.JWTKey))
		if err != nil {
			return nil, nil, fmt.Errorf("jwt key: %v", err)
		}
		opts = append(opts, grpc.WithPerRPCCredentials(cred))
	}
	if cfg.JWTKeyFile != "" {
		cred, err := oauth.NewJWTAccessFromFile(cfg.JWTKeyFile)
		if err != nil {
			return nil, nil, fmt.Errorf("jwt key file: %v", err)
		}
		opts = append(opts, grpc.WithPerRPCCredentials(cred))
	}
	if cfg.Timeout > 0 {
		var done context.CancelFunc
		ctx, done = context.WithTimeout(ctx, cfg.Timeout)
		defer done()
	}
	conn, err := grpc.DialContext(ctx, cfg.ServerAddr, opts...)
	if err != nil {
		return nil, nil, err
	}
	return conn, NewNestedMessagesClient(conn), nil
}

type _NestedMessagesRoundTripFunc func(cli NestedMessagesClient, in iocodec.Decoder, out iocodec.Encoder) error

func _NestedMessagesRoundTrip(ctx context.Context, fn _NestedMessagesRoundTripFunc) error {
	cfg := NestedMessagesClientDefaultConfig
	var dm iocodec.DecoderMaker
	r := os.Stdin
	if cfg.Stdin || cfg.RequestFile == "-" {
		dm = iocodec.DefaultDecoders["json"]
	} else if cfg.RequestFile != "" {
		f, err := os.Open(cfg.RequestFile)
		if err != nil {
			return fmt.Errorf("request file: %v", err)
		}
		defer f.Close()
		if ext := strings.TrimLeft(filepath.Ext(cfg.RequestFile), "."); ext != "" {
			dm = iocodec.DefaultDecoders[ext]
		}
		if dm == nil {
			dm = iocodec.DefaultDecoders["json"]
		}
		r = f
	} else {
		dm = iocodec.DefaultDecoders["noop"]
	}
	var em iocodec.EncoderMaker
	if cfg.ResponseFormat == "" {
		em = iocodec.DefaultEncoders["json"]
	} else if em = iocodec.DefaultEncoders[cfg.ResponseFormat]; em == nil {
		return fmt.Errorf("invalid response format: %q", cfg.ResponseFormat)
	}
	conn, client, err := _NestedMessagesDial(ctx)
	if err != nil {
		return err
	}
	defer conn.Close()
	return fn(client, dm.NewDecoder(r), em.NewEncoder(os.Stdout))
}

func _NestedMessagesGetCommand() *cobra.Command {
	req := &NestedRequest{
		Inner:    &NestedRequest_InnerNestedType{},
		TopLevel: &TopLevelNestedType{},
	}

	cmd := &cobra.Command{
		Use:   "get",
		Short: "Get RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			return _NestedMessagesRoundTrip(cmd.Context(), func(cli NestedMessagesClient, in iocodec.Decoder, out iocodec.Encoder) error {
				v := &NestedRequest{}

				if err := in.Decode(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.Get(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out.Encode(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.Inner.Value, "inner-value", "", "")
	cmd.PersistentFlags().StringVar(&req.TopLevel.Value, "toplevel-value", "", "")

	return cmd
}

func _NestedMessagesGetDeeplyNestedCommand() *cobra.Command {
	req := &DeeplyNested{
		L0: &DeeplyNested_DeeplyNestedOuter{
			L1: &DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner{
				L2: &DeeplyNested_DeeplyNestedOuter_DeeplyNestedInner_DeeplyNestedInnermost{},
			},
		},
	}

	cmd := &cobra.Command{
		Use:   "getdeeplynested",
		Short: "GetDeeplyNested RPC client",
		Long:  "",
		RunE: func(cmd *cobra.Command, args []string) error {
			return _NestedMessagesRoundTrip(cmd.Context(), func(cli NestedMessagesClient, in iocodec.Decoder, out iocodec.Encoder) error {
				v := &DeeplyNested{}

				if err := in.Decode(v); err != nil {
					return err
				}
				proto.Merge(v, req)

				res, err := cli.GetDeeplyNested(cmd.Context(), v)

				if err != nil {
					return err
				}

				return out.Encode(res)

			})
		},
	}

	cmd.PersistentFlags().StringVar(&req.L0.L1.L2.L3, "l0-l1-l2-l3", "", "")

	return cmd
}
