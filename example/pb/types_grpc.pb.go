// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TypesClient is the client API for Types service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TypesClient interface {
	Echo(ctx context.Context, in *Sound, opts ...grpc.CallOption) (*Sound, error)
}

type typesClient struct {
	cc grpc.ClientConnInterface
}

func NewTypesClient(cc grpc.ClientConnInterface) TypesClient {
	return &typesClient{cc}
}

func (c *typesClient) Echo(ctx context.Context, in *Sound, opts ...grpc.CallOption) (*Sound, error) {
	out := new(Sound)
	err := c.cc.Invoke(ctx, "/example.Types/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TypesServer is the server API for Types service.
// All implementations must embed UnimplementedTypesServer
// for forward compatibility
type TypesServer interface {
	Echo(context.Context, *Sound) (*Sound, error)
	mustEmbedUnimplementedTypesServer()
}

// UnimplementedTypesServer must be embedded to have forward compatible implementations.
type UnimplementedTypesServer struct {
}

func (*UnimplementedTypesServer) Echo(context.Context, *Sound) (*Sound, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedTypesServer) mustEmbedUnimplementedTypesServer() {}

func RegisterTypesServer(s *grpc.Server, srv TypesServer) {
	s.RegisterService(&_Types_serviceDesc, srv)
}

func _Types_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypesServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.Types/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypesServer).Echo(ctx, req.(*Sound))
	}
	return interceptor(ctx, in, info, handler)
}

var _Types_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.Types",
	HandlerType: (*TypesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Types_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}
