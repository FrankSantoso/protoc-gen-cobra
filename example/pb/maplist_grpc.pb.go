// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MapListClient is the client API for MapList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MapListClient interface {
	Method(ctx context.Context, in *MapListRequest, opts ...grpc.CallOption) (*MapListResponse, error)
}

type mapListClient struct {
	cc grpc.ClientConnInterface
}

func NewMapListClient(cc grpc.ClientConnInterface) MapListClient {
	return &mapListClient{cc}
}

func (c *mapListClient) Method(ctx context.Context, in *MapListRequest, opts ...grpc.CallOption) (*MapListResponse, error) {
	out := new(MapListResponse)
	err := c.cc.Invoke(ctx, "/pb.MapList/Method", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapListServer is the server API for MapList service.
// All implementations must embed UnimplementedMapListServer
// for forward compatibility
type MapListServer interface {
	Method(context.Context, *MapListRequest) (*MapListResponse, error)
	mustEmbedUnimplementedMapListServer()
}

// UnimplementedMapListServer must be embedded to have forward compatible implementations.
type UnimplementedMapListServer struct {
}

func (*UnimplementedMapListServer) Method(context.Context, *MapListRequest) (*MapListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method not implemented")
}
func (*UnimplementedMapListServer) mustEmbedUnimplementedMapListServer() {}

func RegisterMapListServer(s *grpc.Server, srv MapListServer) {
	s.RegisterService(&_MapList_serviceDesc, srv)
}

func _MapList_Method_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapListServer).Method(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MapList/Method",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapListServer).Method(ctx, req.(*MapListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MapList_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MapList",
	HandlerType: (*MapListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Method",
			Handler:    _MapList_Method_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maplist.proto",
}
